@startuml

class AnalizadorResultados {
  -estudio: Estudio
  -resultados: dict
  
  +analizar(): dict
  -obtener_info_general(): dict
  -calcular_estadisticas(): dict
  -generar_graficos(): dict
  -obtener_datos_crudos(): list
  +exportar_resultados(formato: str = 'csv'): void
}

class Estudio {
  +titulo: str
  +tipo: str
  +fecha_inicio: datetime
  +fecha_fin: datetime
  +grupo_objetivo: list
  +encuesta: Encuesta
}

AnalizadorResultados --> Estudio: -estudio
Estudio --> Encuesta: +encuesta

class BancoPreguntas {
    -tipos_pregunta: dict
    -preguntas: dict

    +obtener_tipos_pregunta(): dict
    +obtener_categoria(categoria: str): list
    +obtener_categorias(): list
    +obtener_preguntas(categoria: str): list
    +agregar_pregunta(categoria: str, pregunta: str, tipo: str, opciones_personalizadas: list = None): void
    +personalizar_opciones(categoria: str, indice_pregunta: int, opciones_nuevas: list): void
}

class TipoPregunta {
    +nombre: str
    +opciones: list
}

class Pregunta {
    +texto: str
    +tipo: str
    +opciones_personalizadas: list
}

BancoPreguntas "1" *-- "n" TipoPregunta: -tipos_pregunta
BancoPreguntas "1" *-- "n" Pregunta: -preguntas

class Controlador {
    -ventana_login: VentanaLogin
    -aplicacion: Aplicacion
    
    +iniciar(): void
    +iniciar_aplicacion(usuario: Usuario): void
    +volver_login(): void
}

class VentanaLogin {
    +mainloop()
    +withdraw()
    +deiconify()
}

class Aplicacion {
    -root: tk.Tk
    +mainloop()
}

Controlador "1" --> "1" VentanaLogin: -ventana_login
Controlador "1" --> "1" Aplicacion: -aplicacion

class Coordinador {
    -nombre: str
    -email: str
    -rol: str
    -estudios_asignados: List[Estudio]
    
    +crear_estudio(titulo: str, descripcion: str, tipo: str): Estudio
    +obtener_estudios(): List[Estudio]
    +obtener_estadisticas(): dict
}

class Estudio {
    -titulo: str
    -descripcion: str
    -tipo: str
    -estado: str
    -coordinador: Coordinador
}

Coordinador "1" o-- "n" Estudio: -estudios_asignados

class Usuario {
  - nombre: String
  - correo: String
  - contraseña: String
  - rol: Rol
  - activo: Boolean
  + __init__(nombre, correo, contraseña, rol)
  + tiene_permiso(permiso): Boolean
  + puede_crear_encuesta(): Boolean
  + puede_ver_resultados(): Boolean
  + puede_generar_informes(): Boolean
  + puede_gestionar_usuarios(): Boolean
}

class Pregunta {
    -texto: str
    -tipo: str
    -opciones: list
}

Encuesta "1" --> "1" Usuario: -creador
Encuesta "1" --> "n" Usuario: -participantes
Encuesta "1" *-- "n" Pregunta: -preguntas

enum TipoRol {
    COORDINADOR
    ANALISTA
}

class Usuario {
    -nombre: str
    -correo: str
    -ubicacion: str
    -rol: Rol
    -contraseña: str
}

class GestionUsuarios {
    -usuarios: Dict[str, Usuario]
    
    -crear_usuarios_iniciales(): void
    +agregar_usuario(usuario: Usuario): void
    +obtener_usuario(correo: str): Usuario
    +validar_credenciales(correo: str, contraseña: str): Usuario
}

GestionUsuarios "1" o-- "n" Usuario: -usuarios
Usuario "1" --> "1" Rol
Rol "1" --> "1" TipoRol

class GestorDatos {
    +{static} importar_csv(ruta_archivo: str): List[dict]
    +{static} exportar_resultados(encuesta: Encuesta, ruta_archivo: str): void
}

GestorDatos ..> Encuesta: uses

class VentanaLogin {
    -correo_var: StringVar
    -password_var: StringVar
    -gestion_usuarios: GestionUsuarios
    
    -crear_widgets(): void
    -login(): void
    -iniciar_aplicacion(usuario: Usuario): void
}

class VentanaPrincipal {
    -parent: VentanaLogin
    -usuario: Usuario
    -root: Tk
    
    -crear_widgets(): void
    +abrir_gestionar_encuestas(): void
    +abrir_resultados(): void
    +gestionar_usuarios(): void
    +cerrar_sesion(): void
    +cerrar_aplicacion(): void
    +mainloop(): void
}

class GestionUsuarios {
}

class Usuario {
    +puede_crear_encuesta(): bool
    +puede_ver_resultados(): bool
    +puede_gestionar_usuarios(): bool
}

VentanaLogin --> GestionUsuarios
VentanaLogin --> VentanaPrincipal: creates
VentanaPrincipal --> Usuario

class VentanaUsuarios {
    -lista_usuarios: Treeview
    
    -crear_widgets(): void
    -cargar_usuarios(): void
    +nuevo_usuario(): void
    +editar_usuario(): void
    +eliminar_usuario(): void
}

class tk.Toplevel {
}

VentanaUsuarios --|> tk.Toplevel

class VentanaResultados {
    -usuario: Usuario
    -lista_encuestas: Treeview
    -resultado_text: Text
    
    -crear_widgets(): void
    -cargar_encuestas(): void
    +ver_estadisticas(): void
    +generar_informe(): void
    +exportar_datos(): void
}

class tk.Toplevel {
}

class Usuario {
}

VentanaResultados --|> tk.Toplevel
VentanaResultados --> Usuario

class VentanaResponderEncuesta {
    -encuesta: Encuesta
    -respuestas: Dict[int, StringVar]
    
    -crear_widgets(): void
    -enviar_respuestas(): void
}

class tk.Toplevel {
}

VentanaResponderEncuesta --|> tk.Toplevel
VentanaResponderEncuesta --> Encuesta

class VentanaPrincipal {
    -frame_principal: ttk.Frame
    -root: tk.Tk
    
    -crear_menu(): void
    -crear_widgets(): void
    +nueva_encuesta(): void
    +gestionar_encuestas(): void
    +gestionar_participantes(): void
}

class VentanaEncuesta {
}

class VentanaParticipantes {
}

class VentanaGestionarEncuestas {
}

VentanaPrincipal --> VentanaEncuesta: creates
VentanaPrincipal --> VentanaParticipantes: creates
VentanaPrincipal --> VentanaGestionarEncuestas: creates

class VentanaPersonalizarPregunta {
    -pregunta: dict
    -resultado: dict
    -texto_pregunta: ttk.Entry
    -tipo_var: StringVar
    -combo_tipo: ttk.Combobox
    -frame_opciones: ttk.LabelFrame
    -opciones_entries: List[ttk.Entry]
    
    -center_window(): void
    -crear_widgets(): void
    -actualizar_opciones(event: Event = None): void
    -eliminar_opcion(frame: ttk.Frame, entry: ttk.Entry): void
    -agregar_opcion(): void
    -restaurar_defaults(): void
    -validar_datos(): bool
    +guardar(): void
    +cancelar(): void
}

class tk.Toplevel {
}

class BancoPreguntas {
    +tipos_pregunta: dict
}

VentanaPersonalizarPregunta --|> tk.Toplevel
VentanaPersonalizarPregunta --> BancoPreguntas: uses

class VentanaParticipantes {
    -participantes: list
    -tabla: ttk.Treeview
    -edad_var: StringVar
    -genero_var: StringVar
    
    -crear_widgets(): void
    -crear_tabla(): void
    +importar_csv(): void
    +cargar_participantes(datos: list): void
    +agregar_participante(): void
    +eliminar_seleccionados(): void
    +aplicar_filtros(): void
}

class DialogoNuevoParticipante {
    -participante: tuple
    -nombre_var: StringVar
    -email_var: StringVar
    -edad_var: StringVar
    -genero_var: StringVar
    
    -crear_widgets(): void
    -guardar(): void
    -validar_datos(): bool
    -center_window(): void
}

class GestorDatos {
    +{static} importar_csv(archivo: str): list
}

VentanaParticipantes --|> tk.Toplevel
DialogoNuevoParticipante --|> tk.Toplevel
VentanaParticipantes --> DialogoNuevoParticipante: creates
VentanaParticipantes --> GestorDatos: uses

class VentanaLogin {
    -gestion_usuarios: GestionUsuarios
    -correo_var: StringVar
    -password_var: StringVar
    
    -crear_widgets(): void
    -login(): void
    +iniciar_aplicacion(usuario: Usuario): void
    +cerrar_aplicacion(app: Aplicacion): void
    +main(): void
}

class tk.Tk {
}

class GestionUsuarios {
    +validar_credenciales(correo: str, password: str): Usuario
}

class Aplicacion {
    +root: tk.Tk
}

VentanaLogin --|> tk.Tk
VentanaLogin --> GestionUsuarios
VentanaLogin --> Aplicacion: creates

class VentanaGestionarEncuestas {
    {static} -encuestas: List[Encuesta]
    -tabla: ttk.Treeview
    -estado_var: StringVar
    
    +{static} agregar_encuesta(encuesta: Encuesta): void
    -crear_widgets(): void
    +editar_encuesta(): void
    +actualizar_encuesta(): void
    +nueva_encuesta(): void
    +publicar_encuesta(): void
    +cerrar_encuesta(): void
    +eliminar_encuesta(): void
    +ver_resultados(): void
    -mostrar_resultados(encuesta: Encuesta): void
    +cargar_encuestas(): void
    +aplicar_filtros(): void
    +cargar_desde_csv(): void
}

class tk.Toplevel {
}

VentanaGestionarEncuestas --|> tk.Toplevel
VentanaGestionarEncuestas "1" o-- "n" Encuesta: -encuestas

class VentanaEncuesta {
    -parent: tk.Widget
    -banco_preguntas: BancoPreguntas
    -preguntas_seleccionadas: List[Dict]
    -titulo_var: StringVar
    -categoria_var: StringVar
    -descripcion_text: Text
    -lista_preguntas: Treeview
    -lista_seleccionadas: Treeview
    
    -crear_widgets(): void
    +actualizar_preguntas(event: Event = None): void
    +agregar_pregunta(): void
    +personalizar_pregunta(): void
    +eliminar_pregunta(): void
    -actualizar_lista_seleccionadas(): void
    +guardar_encuesta(): void
}

class BancoPreguntas {
    +tipos_pregunta: Dict
    +obtener_categorias(): List[str]
    +obtener_categoria(categoria: str): List[Dict]
}

class VentanaPersonalizarPregunta {
}

VentanaEncuesta --|> tk.Toplevel
VentanaEncuesta --> BancoPreguntas
VentanaEncuesta --> VentanaPersonalizarPregunta: creates

class VentanaEdicion {
    -encuesta: Encuesta
    -indice: int
    -banco_preguntas: BancoPreguntas
    -preguntas_seleccionadas: List[Dict]
    -titulo_var: StringVar
    -categoria_var: StringVar
    
    -crear_widgets(): void
    -cargar_datos_encuesta(): void
    +actualizar_preguntas(event: Event = None): void
    +agregar_pregunta(): void
    +editar_pregunta(): void
    +eliminar_pregunta(): void
    -actualizar_lista_seleccionadas(): void
    +guardar_cambios(): void
    +validar_datos(): bool
}

class tk.Toplevel {
}

class BancoPreguntas {
    +tipos_pregunta: Dict
    +obtener_preguntas(categoria: str): List[Dict]
}

class VentanaPersonalizarPregunta {
}

VentanaEdicion --|> tk.Toplevel
VentanaEdicion --> BancoPreguntas
VentanaEdicion --> VentanaPersonalizarPregunta: creates
VentanaEdicion --> Encuesta: modifies

class Usuario {
    -nombre: str
    -correo: str
    -contraseña: str
    -rol: Rol
    -activo: bool
    
    +tiene_permiso(permiso: str): bool
    +puede_crear_encuesta(): bool
    +puede_ver_resultados(): bool
    +puede_generar_informes(): bool
    +puede_gestionar_usuarios(): bool
}

Usuario --> Rol

enum TipoRol {
    COORDINADOR
    ANALISTA
}

class Rol {
    -tipo: TipoRol
    -permisos: Dict[str, bool]
    
    -_asignar_permisos(): Dict[str, bool]
}

Rol --> TipoRol

class ResultadosEncuesta {
    -encuesta: Encuesta
    -respuestas: List
    -tasa_respuesta: float
    -distribucion_respuestas: Dict
    -estadisticas: Dict
    
    +generar_informe(): Report
    -calcular_tasa_respuesta(): void
    -analizar_distribucion(): void
    -calcular_estadisticas(): void
    -crear_reporte(): Report
    +exportar_datos_crudos(): void
}

class Encuesta {
  - titulo: String
  - descripcion: String
  - creador: Usuario
  - preguntas: List
  - fecha_creacion: DateTime
  - fecha_publicacion: DateTime
  - fecha_cierre: DateTime
  - estado: String
  - participantes: List
  - respuestas: Dictionary
  
  + __init__(titulo, descripcion, creador)
  + agregar_pregunta(texto, tipo, opciones)
  + publicar(fecha_cierre)
  + cerrar()
  + agregar_participante(participante)
  + registrar_respuesta(participante_id, pregunta_id, respuesta)
  + obtener_estadisticas(): Dictionary
}

ResultadosEncuesta --> Encuesta

class Pregunta {
    -texto: str
    -tipo: str
    -opciones: List[str]
    
    +agregar_opcion(opcion: str): void
}

class Participante {
    -nombre: str
    -email: str
    -edad: int
    -genero: str
    -datos_adicionales: Dict
    
    +agregar_dato(clave: str, valor: Any): void
}

@enduml